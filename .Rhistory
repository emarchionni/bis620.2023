# 241 extra ex
remove(list=ls())
x <- seq(from = 0, to = 1, by = 0.01)
df <- data.frame(x = x,
y = c(x/(1-x),
2x-x^2),
# 241 extra ex
remove(list=ls())
x <- seq(from = 0, to = 1, by = 0.01)
df <- data.frame(x = x,
y = c(x/(1-x),
2*x-x^2),
Function = rep(c("Timid", "Bold"))
)
library(ggplot2)
x11()
ggplot(df, aes(x, y, col = Function)) + geom_line()
# 241 extra ex
remove(list=ls())
x <- seq(from = 0, to = 1, by = 0.01)
df <- data.frame(x = x,
y = c(x/(1-x),
2*x-x^2),
Function = rep(c("Timid", "Bold"))
)
library(ggplot2)
x11()
ggplot(df, aes(x, y, col = Function)) + geom_function()
x11()
ggplot(data.frame(x=c(0,1)), aes(x))) +
library(ggplot2)
x11()
ggplot(data.frame(x=c(0,1)), aes(x)) +
stat_function(fun = function(x) 2*x-x^2, geom="line", aes(colour="Bold")) +
stat_function(fun = function(x) x/(1-x), geom="line", aes(colour="Timid"))
x11()
ggplot(data.frame(x=c(0,1)), aes(x)) +
stat_function(fun = function(x) 2*x-x^2, geom="line", aes(colour="Bold"))
ggplot(data.frame(x=c(0,1)), aes(x)) +
stat_function(fun = function(x) 2*x-x^2, geom="line", aes(colour="Bold")) +
stat_function(fun = function(x) x/(1-x+x^2), geom="line", aes(colour="Timid"))
ggplot(data.frame(x=c(0,1)), aes(x)) +
stat_function(fun = function(x) 2*x-x^2, geom="line", aes(colour="Bold")) +
stat_function(fun = function(x) (1-((1-p)/p)^3)/(1-((1-p)/p)^4), geom="line", aes(colour="Timid"))
ggplot(data.frame(x=c(0,1)), aes(x)) +
stat_function(fun = function(x) 2*x-x^2, geom="line", aes(colour="Bold")) +
stat_function(fun = function(p) (1-((1-p)/p)^3)/(1-((1-p)/p)^4), geom="line", aes(colour="Timid"))
x11()
ggplot(data.frame(x=c(0,1)), aes(x)) +
stat_function(fun = function(x) 2*x-x^2, geom="line", aes(colour="Bold")) +
# stat_function(fun = function(p) (1-((1-p)/p)^3)/(1-((1-p)/p)^4), geom="line", aes(colour="Timid"))
stat_function(fun = function(p) (p-p^2+p^3)/(1-2*p+2*p^2), geom="line", aes(colour="Timid"))
x11()
ggplot(data.frame(x=c(0,1)), aes(x)) +
stat_function(fun = pgamma(shape = 20.25, rate = 5.5), geom="line", aes(colour="Posterior 1"))
x11()
ggplot(data.frame(x=c(0,1)), aes(x)) +
stat_function(fun = pgamma(x ,shape = 20.25, rate = 5.5), geom="line", aes(colour="Posterior 1"))
remove(list=ls())
x <- seq(from = 0, to = 100, by = 0.01)
df <- data.frame(x = x,
y = c(pgamma(x, shape = 20.25, rate = 5.5),
pgamma(x, shape = 20.25, rate = 5.025)),
Posterior = rep(c("Posterior 1", "Posterior 2"))
)
library(ggplot2)
x11()
ggplot(df, aes(x, y, col = Posterior)) + geom_density()
remove(list=ls())
x <- seq(from = 0, to = 100, by = 0.01)
df <- data.frame(x = x,
y = c(pgamma(x, shape = 20.25, rate = 5.5),
pgamma(x, shape = 20.25, rate = 5.025)),
Posterior = rep(c("Posterior 1", "Posterior 2"))
)
library(ggplot2)
x11()
ggplot(df, aes(x, y, col = Posterior)) + geom_function()
x11()
ggplot(data.frame(x=c(0,1)), aes(x)) +
stat_function(fun = pgamma, geom="line", args = list(shape = 20.25, rate = 5.5),  aes(colour="Posterior 1"))
x11()
ggplot(data.frame(x=c(0,1)), aes(x)) +
stat_function(fun = pgamma, geom="line", args = list(shape = 20.25, rate = 102.5),  aes(colour="Posterior 1"))
x11()
ggplot(data.frame(x=c(0,1)), aes(x)) +
stat_function(fun = pgamma, geom="line", args = list(shape = 20.25, rate = 102.5),  aes(colour="Posterior 1")) +
stat_function(fun = pgamma, geom="line", args = list(shape = 20.25, rate = 102.025),  aes(colour="Posterior 1"))
dev.off
dev.off()
x11()
ggplot(data.frame(x=c(0,1)), aes(x)) +
stat_function(fun = pgamma, geom="line", args = list(shape = 20.25, rate = 102.5),  aes(colour="Posterior 1")) +
stat_function(fun = pgamma, geom="line", args = list(shape = 20.25, rate = 102.025),  aes(colour="Posterior 2"))
x11()
ggplot(data.frame(x=c(0,20)), aes(x)) +
stat_function(fun = dgamma, geom="line", args = list(shape = 20.25, rate = 102.5),  aes(colour="Posterior 1")) +
stat_function(fun = dgamma, geom="line", args = list(shape = 20.25, rate = 102.025),  aes(colour="Posterior 2"))
x11()
ggplot(data.frame(x=c(0,5)), aes(x)) +
stat_function(fun = dgamma, geom="line", args = list(shape = 20.25, rate = 102.5),  aes(colour="Posterior 1")) +
stat_function(fun = dgamma, geom="line", args = list(shape = 20.25, rate = 102.025),  aes(colour="Posterior 2"))
x11()
ggplot(data.frame(x=c(0,4)), aes(x)) +
stat_function(fun = dgamma, geom="line", args = list(shape = 20.25, rate = 102.5),  aes(colour="Posterior 1")) +
stat_function(fun = dgamma, geom="line", args = list(shape = 20.25, rate = 102.025),  aes(colour="Posterior 2"))
graphics.off()
x11()
ggplot(data.frame(x=c(0,2)), aes(x)) +
stat_function(fun = dgamma, geom="line", args = list(shape = 20.25, rate = 102.5),  aes(colour="Posterior 1")) +
stat_function(fun = dgamma, geom="line", args = list(shape = 20.25, rate = 102.025),  aes(colour="Posterior 2"))
library(ggplot2)
x11()
ggplot(data.frame(x=c(0,2)), aes(x)) +
stat_function(fun = dgamma, geom="line", args = list(shape = 20.25, rate = 5.6),  aes(colour="Posterior 1")) +
stat_function(fun = dgamma, geom="line", args = list(shape = 20.25, rate = 5.125),  aes(colour="Posterior 2"))
x11()
ggplot(data.frame(x=c(0,7)), aes(x)) +
stat_function(fun = dgamma, geom="line", args = list(shape = 20.25, rate = 5.6),  aes(colour="Posterior 1")) +
stat_function(fun = dgamma, geom="line", args = list(shape = 20.25, rate = 5.125),  aes(colour="Posterior 2"))
graphics.off()
x11()
ggplot(data.frame(x=c(0,7)), aes(x)) +
stat_function(fun = dbeta, geom="line", args = list(shape1 = 4, shape2 = 98),  aes(colour="Posterior 1")) +
stat_function(fun = dbeta, geom="line", args = list(shape1 = 7/2, shape2 = 195/2),  aes(colour="Posterior 2"))
graphics.off()
x11()
ggplot(data.frame(x=c(0,1)), aes(x)) +
stat_function(fun = dbeta, geom="line", args = list(shape1 = 4, shape2 = 98),  aes(colour="Posterior 1")) +
stat_function(fun = dbeta, geom="line", args = list(shape1 = 7/2, shape2 = 195/2),  aes(colour="Posterior 2"))
x11()
ggplot(data.frame(x=c(0,.25)), aes(x)) +
stat_function(fun = dbeta, geom="line", args = list(shape1 = 4, shape2 = 98),  aes(colour="Posterior 1")) +
stat_function(fun = dbeta, geom="line", args = list(shape1 = 7/2, shape2 = 195/2),  aes(colour="Posterior 2"))
??gsub
??gsub()
library(shiny); runApp('C:/Users/edoar/Desktop/BIS620 Data Science Software Systems/midterm/midterm_project_bis620/app_project_draft_Edoardo.R')
library(reticulate)
install_miniconda()
print(i)
for (i in 1:1000){
print(i)
}
max_iter <- 1e3
i <- 9
paste0("x",i)
library(extraDistr)
theta <- 0
max_iter <- 1e4
risk_MM <- 0
risl_ML <- 0
risk_BI <- 0
BI_fun <- function(v){
v <- sort(v)
for(i in 1:3)
assign(paste0("x",i), v[i])
BI <- (
(- 2 / 3 * x[1] + 8 / 9) * exp( 2 * x[1] - x[2] - x[3]) +
(- 2 / 3 * x[1] - 8 / 9) * exp( x[1] + x[2] - 2 * x[3]) +
2 * x[2] * exp( x[1] - x[3] )
) / (
2 * exp( x[1] - x[3] ) -
2 / 3 * exp( 2 * x[1] - x[2] - x[3] ) -
2 / 3 * exp( x[1] + x[2] - 2 * x[3] )
)
return(BI)
}
for (i in 1:max_iter) {
sample <- rlaplace(3) # default location is 0 and scale is 1
MM <- mean(sample)
ML <- median(sample)
BI <- BI(BI_fun)
risk_MM <- risk_MM + MM^2
risk_ML <- risk_ML + ML^2
risk_BI <- risk_BI + B^2
}
library(extraDistr)
theta <- 0
max_iter <- 1e4
risk_MM <- 0
risl_ML <- 0
risk_BI <- 0
BI_fun <- function(v){
v <- sort(v)
for(i in 1:3)
assign(paste0("x",i), v[i])
BI <- (
(- 2 / 3 * x[1] + 8 / 9) * exp( 2 * x[1] - x[2] - x[3]) +
(- 2 / 3 * x[1] - 8 / 9) * exp( x[1] + x[2] - 2 * x[3]) +
2 * x[2] * exp( x[1] - x[3] )
) / (
2 * exp( x[1] - x[3] ) -
2 / 3 * exp( 2 * x[1] - x[2] - x[3] ) -
2 / 3 * exp( x[1] + x[2] - 2 * x[3] )
)
return(BI)
}
for (i in 1:max_iter) {
sample <- rlaplace(3) # default location is 0 and scale is 1
MM <- mean(sample)
ML <- median(sample)
BI <- BI_fun(sample)
risk_MM <- risk_MM + MM^2
risk_ML <- risk_ML + ML^2
risk_BI <- risk_BI + B^2
}
library(extraDistr)
theta <- 0
max_iter <- 1e4
risk_MM <- 0
risl_ML <- 0
risk_BI <- 0
BI_fun <- function(x){
x <- sort(x)
BI <- (
(- 2 / 3 * x[1] + 8 / 9) * exp( 2 * x[1] - x[2] - x[3]) +
(- 2 / 3 * x[1] - 8 / 9) * exp( x[1] + x[2] - 2 * x[3]) +
2 * x[2] * exp( x[1] - x[3] )
) / (
2 * exp( x[1] - x[3] ) -
2 / 3 * exp( 2 * x[1] - x[2] - x[3] ) -
2 / 3 * exp( x[1] + x[2] - 2 * x[3] )
)
return(BI)
}
for (i in 1:max_iter) {
sample <- rlaplace(3) # default location is 0 and scale is 1
MM <- mean(sample)
ML <- median(sample)
BI <- BI_fun(sample)
risk_MM <- risk_MM + MM^2
risk_ML <- risk_ML + ML^2
risk_BI <- risk_BI + B^2
}
library(extraDistr)
theta <- 0
max_iter <- 1e4
risk_MM <- 0
risk_ML <- 0
risk_BI <- 0
BI_fun <- function(x){
x <- sort(x)
BI <- (
(- 2 / 3 * x[1] + 8 / 9) * exp( 2 * x[1] - x[2] - x[3]) +
(- 2 / 3 * x[1] - 8 / 9) * exp( x[1] + x[2] - 2 * x[3]) +
2 * x[2] * exp( x[1] - x[3] )
) / (
2 * exp( x[1] - x[3] ) -
2 / 3 * exp( 2 * x[1] - x[2] - x[3] ) -
2 / 3 * exp( x[1] + x[2] - 2 * x[3] )
)
return(BI)
}
for (i in 1:max_iter) {
sample <- rlaplace(3) # default location is 0 and scale is 1
MM <- mean(sample)
ML <- median(sample)
BI <- BI_fun(sample)
risk_MM <- risk_MM + MM^2
risk_ML <- risk_ML + ML^2
risk_BI <- risk_BI + B^2
}
library(extraDistr)
theta <- 0
max_iter <- 1e4
risk_MM <- 0
risk_ML <- 0
risk_BI <- 0
BI_fun <- function(x){
x <- sort(x)
BI <- (
(- 2 / 3 * x[1] + 8 / 9) * exp( 2 * x[1] - x[2] - x[3]) +
(- 2 / 3 * x[1] - 8 / 9) * exp( x[1] + x[2] - 2 * x[3]) +
2 * x[2] * exp( x[1] - x[3] )
) / (
2 * exp( x[1] - x[3] ) -
2 / 3 * exp( 2 * x[1] - x[2] - x[3] ) -
2 / 3 * exp( x[1] + x[2] - 2 * x[3] )
)
return(BI)
}
for (i in 1:max_iter) {
sample <- rlaplace(3) # default location is 0 and scale is 1
MM <- mean(sample)
ML <- median(sample)
BI <- BI_fun(sample)
risk_MM <- risk_MM + MM^2
risk_ML <- risk_ML + ML^2
risk_BI <- risk_BI + BI^2
}
print(paste("Estimated risk MM:", risk_MM))
print(paste("Estimated risk ML:", risk_ML))
print(paste("Estimated risk BI:", risk_BI))
library(extraDistr)
theta <- 0
max_iter <- 1e4
risk_MM <- c()
risk_ML <- c()
risk_BI <- c()
BI_fun <- function(x){
x <- sort(x)
BI <- (
(- 2 / 3 * x[1] + 8 / 9) * exp( 2 * x[1] - x[2] - x[3]) +
(- 2 / 3 * x[1] - 8 / 9) * exp( x[1] + x[2] - 2 * x[3]) +
2 * x[2] * exp( x[1] - x[3] )
) / (
2 * exp( x[1] - x[3] ) -
2 / 3 * exp( 2 * x[1] - x[2] - x[3] ) -
2 / 3 * exp( x[1] + x[2] - 2 * x[3] )
)
return(BI)
}
for (i in 1:max_iter) {
sample <- rlaplace(3) # default location is 0 and scale is 1
MM <- mean(sample)
ML <- median(sample)
BI <- BI_fun(sample)
risk_MM <- c(risk_MM, MM^2)
risk_ML <- c(risk_ML, ML^2)
risk_BI <- c(risk_BI, BI^2)
}
print(paste("Estimated risk MM:", risk_MM))
library(extraDistr)
theta <- 0
max_iter <- 1e4
risk_MM <- c()
risk_ML <- c()
risk_BI <- c()
BI_fun <- function(x){
x <- sort(x)
BI <- (
(- 2 / 3 * x[1] + 8 / 9) * exp( 2 * x[1] - x[2] - x[3]) +
(- 2 / 3 * x[1] - 8 / 9) * exp( x[1] + x[2] - 2 * x[3]) +
2 * x[2] * exp( x[1] - x[3] )
) / (
2 * exp( x[1] - x[3] ) -
2 / 3 * exp( 2 * x[1] - x[2] - x[3] ) -
2 / 3 * exp( x[1] + x[2] - 2 * x[3] )
)
return(BI)
}
for (i in 1:max_iter) {
sample <- rlaplace(3) # default location is 0 and scale is 1
MM <- mean(sample)
ML <- median(sample)
BI <- BI_fun(sample)
risk_MM <- c(risk_MM, MM^2)
risk_ML <- c(risk_ML, ML^2)
risk_BI <- c(risk_BI, BI^2)
}
print(paste("Estimated risk MM:", mean(risk_MM)))
print(paste("Estimated risk ML:", mean(risk_ML)))
print(paste("Estimated risk BI:", mean(risk_BI)))
- 2
- 2 / 3
library(extraDistr)
theta <- 0
max_iter <- 1e4
risk_MM <- c()
risk_ML <- c()
risk_BI <- c()
BI_fun <- function(x){
x <- sort(x)
BI <- (
(- 2 / 3 * x[1] + 8 / 9) * exp( 2 * x[1] - x[2] - x[3]) +
(- 2 / 3 * x[3] - 8 / 9) * exp( x[1] + x[2] - 2 * x[3]) +
2 * x[2] * exp( x[1] - x[3] )
) / (
2 * exp( x[1] - x[3] ) -
2 / 3 * exp( 2 * x[1] - x[2] - x[3] ) -
2 / 3 * exp( x[1] + x[2] - 2 * x[3] )
)
return(BI)
}
for (i in 1:max_iter) {
sample <- rlaplace(3) # default location is 0 and scale is 1
MM <- mean(sample)
ML <- median(sample)
BI <- BI_fun(sample)
risk_MM <- c(risk_MM, MM^2)
risk_ML <- c(risk_ML, ML^2)
risk_BI <- c(risk_BI, BI^2)
}
print(paste("Estimated risk MM:", mean(risk_MM)))
print(paste("Estimated risk ML:", mean(risk_ML)))
print(paste("Estimated risk BI:", mean(risk_BI)))
library(reticulate)
py_available()
# Install extra packages like this - after use_condaenv() has been called.
py_install(c("seaborn", "plotnine"), pip = TRUE)
library(reticulate)
reticulate::repl_python()
print("Hello world from Python!")
quit
# Install extra packages like this - after use_condaenv() has been called.
py_install(c("seaborn", "plotnine", "pandas", "transformers", "pytorch"), pip = TRUE)
# Install extra packages like this - after use_condaenv() has been called.
py_install(c("seaborn", "plotnine", "pandas", "transformers", "torch"), pip = TRUE)
# See your current setup.
py_config()
library(reticulate)
# See your current setup.
py_config()
reticulate::repl_python()
print("Hello world from Python!")
a = list(range(1, 4))
import seaborn as sns
import plotnine
quit
# See your current setup.
py_config()
use_python()
library(rminiconda)
remove_miniconda()
remove.packages("rminiconda")
exp(-8)
3/4
-0.5+.25
0.99*2
0.99^2
0.99^2*2
2*(0.99)^2-1
install.packages('usethis')
getwd()
setwd("C:/Users/edoar/Desktop/BIS620 Data Science Software Systems/Homework/3/bis620.2023")
library(devtols)
library(devtools)
data(accel)
accel
data(accel)
accel
library(devtools)
document()
accel <- data("accel")
plot_accel(accel)
document()
check()
documnent()
document()
check()
install.packages('covr')
document()
library(devtools)
document()
download_clinicaltrials()
document()
download_clinicaltrials(install_ctrialsgov = F)
document()
document()
?fluidPage
library(shiny)
document()
document()
document()
document()
??tbl
check()
document()
check()
check()
check()
check()
check()
document()
check()
document()
check()
document()
check()
document()
warnings()
document()
warnings()
library(devtools)
document()
document()
library(devtools)
document()
library(devtools)
document()
check()
launch_shiny()
document()
launch_shiny()
path = "../ctrialsgovdb"
path
paste0(path, "/ctgov.duckdb")
# create the connection to the database ctrialsgov.duckdb in the path ../ctrialsgovdb
con = dbConnect(
duckdb(
paste0(path, "/ctgov.duckdb"),
read_only = TRUE
)
)
# create tables from the database
studies = tbl(con, "studies")
conditions = tbl(con, 'conditions')  # PROBLEM 2
countries = tbl(con, 'countries')  # WORLD MAP FEATURE
getwd()
con = dbConnect(
duckdb(
paste0(path, "/ctgov.duckdb"),
read_only = TRUE
)
)
document()
launch_shiny()
document()
document()
library(devtools)
document()
check()
